code:
  raw: |
    const
      GWL_WNDPROC = -4;
      SB_VERT = 1;
      SB_BOTTOM = 7;
      WM_VSCROLL = $0115;
      WM_ERASEBKGND = $0014;
    
    type
      WPARAM = UINT_PTR;
      LPARAM = LongInt;
      LRESULT = LongInt;
    
    var
      OldStatusLabelWndProc: LongInt;
      OldFilenameLabelWndProc: LongInt;
      OldProgressListBoxWndProc: LongInt;
      ProgressListBox: TNewListBox;
      PrevStatus: string;
      PrevFileName: string;
    
    function CallWindowProc(
      lpPrevWndFunc: LongInt; hWnd: HWND; Msg: UINT; wParam: WPARAM;
      lParam: LPARAM): LRESULT; external 'CallWindowProcW@user32.dll stdcall';  
    function SetWindowLong(hWnd: HWND; nIndex: Integer; dwNewLong: LongInt): LongInt;
      external 'SetWindowLongW@user32.dll stdcall';
    
    procedure AddProgress(S: string);
    begin
      if S <> '' then
      begin
        ProgressListBox.Items.Add(S);
        ProgressListBox.ItemIndex := ProgressListBox.Items.Count;
        SendMessage(ProgressListBox.Handle, WM_VSCROLL, SB_BOTTOM, 0);
      end;
    end;
    
    function StatusLabelWndProc(
      hwnd: HWND; uMsg: UINT; wParam: WPARAM; lParam: LPARAM): LRESULT;
    begin
      Result := CallWindowProc(OldStatusLabelWndProc, hwnd, uMsg, wParam, lParam);
      if PrevStatus <> WizardForm.StatusLabel.Caption then
      begin
        AddProgress(WizardForm.StatusLabel.Caption);
        PrevStatus := WizardForm.StatusLabel.Caption;
      end;
    end;
    
    function FilenameLabelWndProc(
      hwnd: HWND; uMsg: UINT; wParam: WPARAM; lParam: LPARAM): LRESULT;
    begin
      Result := CallWindowProc(OldFilenameLabelWndProc, hwnd, uMsg, wParam, lParam);
      if PrevFileName <> WizardForm.FilenameLabel.Caption then
      begin
        AddProgress(WizardForm.FilenameLabel.Caption);
        PrevFileName := WizardForm.FilenameLabel.Caption;
      end;
    end;
    
    function ProgressListBoxWndProc(
      hwnd: HWND; uMsg: UINT; wParam: WPARAM; lParam: LPARAM): LRESULT;
    begin
      // reduce flicker
      if uMsg = WM_ERASEBKGND then
      begin
        Result := 1;
      end
        else
      begin
        Result := CallWindowProc(OldProgressListBoxWndProc, hwnd, uMsg, wParam, lParam);
      end;
    end;
    
    procedure InitializeWizard();
    begin
      OldStatusLabelWndProc :=
        SetWindowLong(WizardForm.StatusLabel.Handle, GWL_WNDPROC,
          CreateCallback(@StatusLabelWndProc));
      OldFilenameLabelWndProc :=
        SetWindowLong(WizardForm.FilenameLabel.Handle, GWL_WNDPROC,
          CreateCallback(@FilenameLabelWndProc));
    
      WizardForm.ProgressGauge.Top := WizardForm.FilenameLabel.Top;
    
      ProgressListBox := TNewListBox.Create(WizardForm);
      ProgressListBox.Parent := WizardForm.ProgressGauge.Parent;
      ProgressListBox.Top :=
        WizardForm.ProgressGauge.Top + WizardForm.ProgressGauge.Height + ScaleY(8);
      ProgressListBox.Width := WizardForm.FilenameLabel.Width;
      ProgressListBox.Height :=
        ProgressListBox.Parent.ClientHeight - ProgressListBox.Top - ScaleY(16);
      ProgressListBox.Anchors := [akLeft, akTop, akRight, akBottom];
      OldProgressListBoxWndProc :=
        SetWindowLong(ProgressListBox.Handle, GWL_WNDPROC,
          CreateCallback(@ProgressListBoxWndProc));
      // Lame way to shrink width of labels to client width of the list box,
      // so that particularly when the file paths in FilenameLabel are shortened
      // to fit to the label, they actually fit even to the list box.
      WizardForm.StatusLabel.Width := WizardForm.StatusLabel.Width - ScaleY(24);
      WizardForm.FilenameLabel.Width := WizardForm.FilenameLabel.Width - ScaleY(24);
    end;
    
    procedure DeinitializeSetup();
    begin
      // In case you are using VCL styles or similar, this needs to be done before
      // you unload the style.
      SetWindowLong(WizardForm.StatusLabel.Handle, GWL_WNDPROC, OldStatusLabelWndProc);
      SetWindowLong(WizardForm.FilenameLabel.Handle, GWL_WNDPROC, OldFilenameLabelWndProc);
      SetWindowLong(ProgressListBox.Handle, GWL_WNDPROC, OldProgressListBoxWndProc);
    end;
    
    function GetProgramFiles(Param: string): string;
    begin
      if IsWin64 then Result := ExpandConstant('{pf64}')
        else Result := ExpandConstant('{pf32}')
    end;
    procedure SetElevationBit(Filename: string);
    var
      Buffer: string;
      Stream: TStream;
    begin
      Filename := ExpandConstant(Filename);
      Log('Setting elevation bit for ' + Filename);
    
      Stream := TFileStream.Create(FileName, fmOpenReadWrite);
      try
        Stream.Seek(21, soFromBeginning);
        SetLength(Buffer, 1);
        Stream.ReadBuffer(Buffer, 1);
        Buffer[1] := Chr(Ord(Buffer[1]) or $20);
        Stream.Seek(-1, soFromCurrent);
        Stream.WriteBuffer(Buffer, 1);
      finally
        Stream.Free;
      end;
    end;
    
    { ///////////////////////////////////////////////////////////////////// }
    function GetUninstallString(): String;
    var
      sUnInstPath: String;
      sUnInstallString: String;
    begin
      sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
      sUnInstallString := '';
      if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
        RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
      Result := sUnInstallString;
    end;
    
    
    { ///////////////////////////////////////////////////////////////////// }
    function IsUpgrade(): Boolean;
    begin
      Result := (GetUninstallString() <> '');
    end;
    
    { ///////////////////////////////////////////////////////////////////// }
    function UnInstallOldVersion(): Integer;
    var
      sUnInstallString: String;
      iResultCode: Integer;
    begin
    { Return Values: }
    { 1 - uninstall string is empty }
    { 2 - error executing the UnInstallString }
    { 3 - successfully executed the UnInstallString }
    
      { default return value }
      Result := 0;
    
      { get the uninstall string of the old app }
      sUnInstallString := GetUninstallString();
      if sUnInstallString <> '' then begin
        sUnInstallString := RemoveQuotes(sUnInstallString);
        if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
          Result := 3
        else
          Result := 2;
      end else
        Result := 1;
    end;
    
    { ///////////////////////////////////////////////////////////////////// }
    procedure CurStepChanged(CurStep: TSetupStep);
    begin
      if (CurStep=ssInstall) then
      begin
        if (IsUpgrade()) then
        begin
          UnInstallOldVersion();
        end;
      end;
    end;
